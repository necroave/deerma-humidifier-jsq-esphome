substitutions:
  # main prefix for all entities
  name: "Humidifier"
  # name of your node
  node_name: "deerma-humidifier-jsq"

esphome:
  name: $node_name
  platform: ESP8266
  board: esp8285
  includes:
    - deerma_humidifier.h

logger:
    level: DEBUG
    baud_rate: 0

# Enable Home Assistant API
api:
  password: !secret ha_passwd
ota:
  password: !secret ha_passwd

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_passwd
  fast_connect: true
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "$name Fallback Hotspot"
    password: !secret ha_passwd


web_server:
  port: 80

captive_portal:

uart:
  id: humidifier_uart
  rx_pin: GPIO13
  tx_pin: GPIO15
  baud_rate: 115200
  debug:
   direction: both
   dummy_receiver: false
   sequence:
     - lambda: UARTDebug::log_string(direction, bytes);   

custom_component:
  lambda: |-
    auto dh = new DeermaHumidifier(id(humidifier_uart));
    dh->power = id(power);
    dh->led  = id(led_enabled);
    dh->tip_sound = id(sound_enabled);
    dh->temperature_sensor = id(temperature_sensor);
    dh->humidity_sensor = id(humidity_sensor);
    dh->tank_empty = id(tank_empty);
    dh->tank_installed = id(tank_installed);
    dh->mode_select = id(mode_select);
    dh->humidity_setpoint = id(humidity_setpoint);
    return {dh};
  components:
    - id: humidifier

#Controllable Switches:
switch:
  # Power status
  - platform: template
    id: power
    name: "$name State"
    icon: mdi:toggle-switch
    turn_on_action:
      - lambda: cast(id(humidifier)).set_power_state(true);
    turn_off_action:
      - lambda: cast(id(humidifier)).set_power_state(false);
  # Led Status
  - platform: template
    id: led_enabled
    name: "$name Led"
    icon: mdi:led-variant-on
    turn_on_action:
      - lambda: cast(id(humidifier)).set_led_state(true);
    turn_off_action:
      - lambda: cast(id(humidifier)).set_led_state(false);
  # Tip sound status
  - platform: template
    id: sound_enabled
    name: "$name Sound"
    icon: mdi:volume-high
    turn_on_action:
      - lambda: cast(id(humidifier)).set_sound_state(true);
    turn_off_action:
      - lambda: cast(id(humidifier)).set_sound_state(false);
      
#Humidity and temperature sensors:
sensor:
  - platform: template
    name: "$name Temperature"
    id: temperature_sensor
    unit_of_measurement: "Â°C"
    device_class: "temperature"
  - platform: template
    name: "$name Humidity"
    id: humidity_sensor 
    unit_of_measurement: "%	"
    device_class: "humidity"

#Binary sensors:   
binary_sensor:
  - platform: template
    name: "$name Water Tank Empty"
    id: tank_empty
    icon: mdi:water-alert
  - platform: template
    name: "$name Water Tank Present"
    id: tank_installed
    icon: mdi:water-boiler   

#Mode selection
select:
  - platform: template
    name: "$name Working Mode"
    id: mode_select
    options:
      - Low
      - Medium
      - High
      - Humidity
    set_action:
      then:
        - lambda: cast(id(humidifier)).set_humidifier_mode(x.c_str());
#Humidifier Setpoint
number:
  - platform: template
    name: "$name Set Humidity"
    id: humidity_setpoint
    #optimistic: true
    min_value: 0
    max_value: 100
    step: 10
    set_action:
      then:
        - lambda: cast(id(humidifier)).set_humidity_target(x);        